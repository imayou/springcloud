<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.1.RELEASE</version>
		<relativePath />
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.ayou.spring</groupId>
	<artifactId>spring-cloud-register</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring-cloud-register</name>
	<url>https://www.qtdu.com</url>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka-server</artifactId>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Camden.SR2</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<finalName>spring-cloud-register</finalName>
		<resources>
			<resource>
			    <directory>${project.basedir}</directory>
			    <filtering>true</filtering>
			    <includes>
			        <include>**/Dockerfile</include>
			    </includes>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
			    <plugin>
			        <groupId>com.spotify</groupId>
			        <artifactId>docker-maven-plugin</artifactId>
			        <version>0.2.3</version>
			        <executions>
			            <execution>
			                <phase>package</phase>
			                <goals>
			                    <goal>build</goal>
			                </goals>
			            </execution>
			        </executions>
			        <configuration>
			            <dockerDirectory>${project.build.directory}/classes</dockerDirectory>
			            <pushImage>${push.image}</pushImage>      <!-- true when Jenkins builds, false otherwise -->
			            <imageName>
			                ${docker.registry}alooma/${project.artifactId}:${git.commit.id.abbrev}
			            </imageName>
			            <resources>
			                <resource>
			                    <targetPath>/</targetPath>
			                    <directory>${project.basedir}</directory>
			                    <excludes>
			                        <exclude>target/**/*</exclude>
			                        <exclude>pom.xml</exclude>
			                        <exclude>*.iml</exclude>
			                    </excludes>
			                </resource>
			                <rescource>
			                    <targetPath>/</targetPath>
			                    <directory>${project.build.directory}</directory>
			                    <include>webgate.war</include>
			                </rescource>
			            </resources>
			        </configuration>
			    </plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>